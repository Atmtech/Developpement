using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using ATMTECH.Administration.DAO.Interface;
using ATMTECH.Administration.Services.Interface;
using ATMTECH.Common.Utilities;
using ATMTECH.Entities;
using ATMTECH.Web.Services.Base;
using File = System.IO.File;

namespace ATMTECH.Administration.Services
{
    public class GenerateDataEditorService : BaseService, IGenerateDataEditorService
    {
        private readonly ManageClass _manageClass = new ManageClass();
        private const string TAB = "\t\t";
        public IDAOEntityInformation DAOEntityInformation { get; set; }
        public IDAOEntityProperty DAOEntityProperty { get; set; }

        public Dictionary<string, string> GetAllEntityInformationToDictionnary(string binDirectory)
        {
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            foreach (string nameSpace in _manageClass.GetAllNameSpaceEntitie(binDirectory))
            {
                foreach (string listEntity in GetEntitiesToGenerate(nameSpace))
                {
                    dictionary.Add(nameSpace + "." + listEntity, listEntity);
                }
            }
            return dictionary;
        }
        public IList<EntityProperty> GetPropertyFromEntityInformation(int id)
        {
            return DAOEntityProperty.GetEntityProperty(id);
        }
        public EntityInformation GetEntityInformation(string nameSpace)
        {
            return DAOEntityInformation.GetEntity(nameSpace);
        }
        public IList<EntityInformation> GetAllEntityInformation()
        {
            return DAOEntityInformation.GetAllEntityInformation();
        }
        public void SaveEntityProperty(EntityProperty entityProperty)
        {
            DAOEntityProperty.SaveEntityProperty(entityProperty);
        }
        public int SaveEntityInformation(EntityInformation entityInformation)
        {
            return DAOEntityInformation.SaveEntity(entityInformation);
        }
        public void AutoGenerateDataModel(string nameSpace, string entity)
        {
            EntityInformation entityInformation = GetEntityInformation(nameSpace);
            if (entityInformation != null)
            {
                CreateNonExistingProperty(nameSpace);
            }
            else
            {
                EntityInformation entityInformationNew = new EntityInformation
                                                             {
                                                                 NameSpace = nameSpace,
                                                                 PageAspx = entity,
                                                                 PageTitle = entity,
                                                                 Entity = entity
                                                             };
                SaveEntityInformation(entityInformationNew);
                CreateNonExistingProperty(nameSpace);
            }
        }
        public void CreatePage(string pageAspx, string nameSpace, IList<EntityProperty> entityProperties, string dataEditorDirectory)
        {
            if (File.Exists(dataEditorDirectory + "\\" + pageAspx + ".aspx"))
            {
                File.Delete(dataEditorDirectory + "\\" + pageAspx + ".aspx");
                File.Delete(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs");
                File.Delete(dataEditorDirectory + "\\" + pageAspx + ".aspx.designer.cs");
            }

            File.Copy(dataEditorDirectory + "\\Template\\Template.aspx", dataEditorDirectory + "\\" + pageAspx + ".aspx");
            File.Copy(dataEditorDirectory + "\\Template\\Template.aspx.cs", dataEditorDirectory + "\\" + pageAspx + ".aspx.cs");
            File.Copy(dataEditorDirectory + "\\Template\\Template.aspx.designer.cs", dataEditorDirectory + "\\" + pageAspx + ".aspx.designer.cs");

            // Replace Word Template wite PageName
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx", "ZZZ", pageAspx + "Page");
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs", "ZZZ", pageAspx + "Page");
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.designer.cs", "ZZZ", pageAspx + "Page");


            // Replace XXX / YYY with EntityName
            string entityName = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx", "XXX", entityName);
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs", "XXX", entityName);
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs", "YYY", Char.ToLowerInvariant(entityName[0]) + entityName.Substring(1));
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.designer.cs", "XXX", entityName);

            // Construire Column
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx", "{ColumnsBound}", SetColumnsBound(nameSpace, entityProperties));
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx", "{EditTemplate}", SetEditTemplate(nameSpace, entityProperties));
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx", "{InsertTemplate}", SetInsertTemplate(nameSpace, entityProperties));


            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs", "{InitComboBox}", GenerateInitCombobox(nameSpace, entityProperties));

            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs", "{DtoClass}", DtoClassCreate(nameSpace));

            string nameSpaceTemp = nameSpace.Substring(0, nameSpace.LastIndexOf("."));
            ReplaceText(dataEditorDirectory + "\\" + pageAspx + ".aspx.cs", "WWW", nameSpaceTemp);
        }

        private string DtoClassCreate(string nameSpace)
        {
            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            nameSpace = nameSpace.Substring(0, nameSpace.LastIndexOf("."));
            string temp = string.Format("public class {0}Dto", entity);
            temp += Environment.NewLine + "{";
            PropertyInfo[] propertyInfos = _manageClass.GetPropertiesFromClass(nameSpace, entity);
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                switch (propertyInfo.PropertyType.Name.ToLower())
                {
                    case "string":
                        temp += TAB + string.Format("{0}public string {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                    case "int32":
                        temp += TAB + string.Format("{0}public int {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                    case "boolean":
                        temp += TAB + string.Format("{0}public bool {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                    case "datetime":
                        temp += TAB + string.Format("{0}public DateTime {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                    case "decimal":
                        temp += TAB + string.Format("{0}public Decimal {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                    case "ilist`1":
                        temp += TAB + string.Format("{0}public int {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                    default:
                        temp += TAB + string.Format("{0}public int {1} {{get;set;}}", Environment.NewLine, propertyInfo.Name);
                        break;
                }

            }
            temp += Environment.NewLine + "}";
            return temp;
        }

        private static void ReplaceText(string file, string search, string replace)
        {

            StreamReader reader = new StreamReader(file);
            string content = reader.ReadToEnd();
            reader.Close();

            content = Regex.Replace(content, search, !String.IsNullOrEmpty(replace) ? replace : "");

            StreamWriter writer = new StreamWriter(file);
            writer.Write(content);
            writer.Close();

        }
        private bool IsPropertyValid(string property)
        {
            bool valid = property != "IsActive";
            if (property == "Id")
            {
                valid = false;
            }
            if (property == "IsChanged")
            {
                valid = false;
            }
            return valid;
        }
        private string GenerateInitCombobox(string nameSpace, IList<EntityProperty> entityProperties)
        {
            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            nameSpace = nameSpace.Substring(0, nameSpace.LastIndexOf("."));

            PropertyInfo[] propertyInfos = _manageClass.GetPropertiesFromClass(nameSpace, entity);
            string codeBehind = null;
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if ((propertyInfo.PropertyType.BaseType != null && propertyInfo.PropertyType.BaseType.Name == "BaseEntity"))
                {
                    codeBehind += String.Format("protected void Init{0}(object sender, EventArgs e)", propertyInfo.Name);
                    codeBehind += Environment.NewLine + "{";
                    codeBehind += Environment.NewLine + String.Format(TAB + "BaseDao<{0},int> dao = new BaseDao<{0},int>();", propertyInfo.PropertyType.Name);
                    codeBehind += Environment.NewLine + TAB + "((ComboBoxAvance)sender).DataSource = dao.GetAllActive();";
                    codeBehind += Environment.NewLine + "}";
                }
            }

            return codeBehind;
        }
        private string SetEditInsertTemplate(string nameSpace, IList<EntityProperty> entityProperties, string type)
        {
            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            nameSpace = nameSpace.Substring(0, nameSpace.LastIndexOf("."));

            string innerHtml = "<table width=\"100%\">";
            PropertyInfo[] propertyInfos = _manageClass.GetPropertiesFromClass(nameSpace, entity);
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                EntityProperty entityProperty = FindProperty(propertyInfo.Name, entityProperties);

                string label = SetLabel(entityProperty, propertyInfo);

                if (!(type == "insert" && propertyInfo.Name == "Id"))
                {



                    innerHtml += "<tr>";
                    switch (propertyInfo.PropertyType.Name.ToLower())
                    {
                        case "string":
                            innerHtml +=
                                string.Format(
                                    "<atmtech:TextBoxAvance enabled=\"{1}\" id=\"txt{0}\" Libelle=\"{2}\" runat=\"server\" Text='<%# Bind(\"{0}\")%>' width=\"100%\"></atmtech:TextBoxAvance>",
                                    propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            break;
                        case "int32":
                            innerHtml +=
                                string.Format(
                                    "<atmtech:AlphaNumTextBoxAvance enabled=\"{1}\" id=\"txt{0}\" Libelle=\"{2}\" runat=\"server\" Text='<%# Bind(\"{0}\")%>'  width=\"100%\"></atmtech:AlphaNumTextBoxAvance>",
                                    propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            break;
                        case "boolean":
                            innerHtml +=
                                string.Format(
                                    "<atmtech:CheckBoxAvance enabled=\"{1}\" id=\"txt{0}\" Libelle=\"{2}\" runat=\"server\" Checked='<%# Bind(\"{0}\")%>'></atmtech:CheckBoxAvance>",
                                    propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            break;
                        case "datetime":
                            if (propertyInfo.Name == "DateModified" || propertyInfo.Name == "DateCreated")
                            {
                                innerHtml +=
                                    string.Format(
                                        "<atmtech:DateTextBoxAvance enabled=\"false\" id=\"txt{0}\" Libelle=\"{1}\" runat=\"server\" Text='<%# Bind(\"{0}\")%>'></atmtech:DateTextBoxAvance>",
                                        propertyInfo.Name, label);
                            }
                            else
                            {
                                innerHtml +=
                                    string.Format(
                                        "<atmtech:DateTextBoxAvance enabled=\"{1}\" id=\"txt{0}\" Libelle=\"{2}\" runat=\"server\" Text='<%# Bind(\"{0}\")%>'></atmtech:DateTextBoxAvance>",
                                        propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            }

                            break;
                        case "decimal":
                            innerHtml +=
                                string.Format(
                                    "<atmtech:AlphaNumTextBoxAvance enabled=\"{1}\" id=\"txt{0}\" Libelle=\"{2}\" runat=\"server\" Text='<%# Bind(\"{0}\")%>'  width=\"100%\"></atmtech:AlphaNumTextBoxAvance>",
                                    propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            break;
                        case "ilist`1":
                            innerHtml += "";
                            break;
                        default:
                            if (propertyInfo.PropertyType.BaseType != null && propertyInfo.PropertyType.BaseType.Name == "BaseEntity")
                            {
                                innerHtml +=
                                string.Format(
                                    "<atmtech:ComboBoxAvance enabled=\"{1}\" id=\"cbo{0}\" Libelle=\"{2}\" runat=\"server\" OnDataBinding=\"Init{0}\" SelectedValue='<%# Bind(\"{0}\")%>'  width=\"100%\" DataValueField=\"Id\" DataTextField=\"Description\"></atmtech:ComboBoxAvance>",
                                    propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            }
                            else
                            {
                                innerHtml +=
                                        string.Format(
                                            "<atmtech:TextBoxAvance enabled=\"{1}\" id=\"txt{0}\" Libelle=\"{2}\" runat=\"server\" Text='<%# Bind(\"{0}\")%>'  width=\"100%\"></atmtech:TextBoxAvance>",
                                            propertyInfo.Name, IsPropertyValid(propertyInfo.Name).ToString(), label);
                            }

                            break;
                    }
                    innerHtml += "</tr>" + Environment.NewLine;
                }
            }
            innerHtml += "</table>";
            return innerHtml;
        }
        private static string SetLabel(EntityProperty entityProperty, PropertyInfo propertyInfo)
        {
            string label = propertyInfo.Name;
            if (entityProperty != null)
            {
                if (!String.IsNullOrEmpty(entityProperty.Label))
                {
                    label = entityProperty.Label;
                }
            }
            return label;
        }
        private string SetEditTemplate(string nameSpace, IList<EntityProperty> entityProperties)
        {
            string temp = SetEditInsertTemplate(nameSpace, entityProperties, "edit");

            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            temp += string.Format("<hr/><asp:button id=\"btnUpdate{0}\" runat=\"server\" Text=\"Enregistrer\" CommandName=\"Update\" />", entity) + (char)13;
            return temp;
        }
        private string SetInsertTemplate(string nameSpace, IList<EntityProperty> entityProperties)
        {
            string temp = SetEditInsertTemplate(nameSpace, entityProperties, "insert");
            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            temp += string.Format("<hr/><asp:button id=\"btnInsert{0}\" runat=\"server\" Text=\"Ajouter\" CommandName=\"Insert\" />", entity) + (char)13;
            return temp;
        }
        private string SetColumnsBound(string nameSpace, IList<EntityProperty> entityProperties)
        {
            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            nameSpace = nameSpace.Substring(0, nameSpace.LastIndexOf("."));

            string columns = null;
            PropertyInfo[] propertyInfos = _manageClass.GetPropertiesFromClass(nameSpace, entity);
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                EntityProperty entityProperty = FindProperty(propertyInfo.Name, entityProperties);

                if (entityProperty != null)
                {
                    columns += Environment.NewLine + string.Format("<asp:BoundField HeaderText=\"{1}\" DataField=\"{0}\" SortExpression=\"{0}\"></asp:BoundField>", propertyInfo.Name, entityProperty.Label);
                }
                else
                {
                    columns += Environment.NewLine + string.Format("<asp:BoundField HeaderText=\"{0}\" DataField=\"{0}\" SortExpression=\"{0}\"></asp:BoundField>", propertyInfo.Name);
                }
            }

            return columns;
        }
        private EntityProperty FindProperty(string propertyToFind, IList<EntityProperty> entityProperties)
        {
            foreach (EntityProperty entityProperty in entityProperties)
            {
                if (entityProperty.PropertyName == propertyToFind)
                {
                    return entityProperty;
                }
            }
            return null;
        }
        private IList<string> GetEntitiesToGenerate(string nameSpace)
        {
            IList<String> entities = _manageClass.GetAllClassesFromNameSpace(nameSpace);
            return entities.Where(entity => entity != "Codes" && entity != "BaseEntity" && entity != "BaseEnumeration").ToList();
        }
        private void CreateNonExistingProperty(string nameSpace)
        {
            string entity = nameSpace.Substring(nameSpace.LastIndexOf(".") + 1, nameSpace.Length - 1 - nameSpace.LastIndexOf("."));
            EntityInformation entityInformation = GetEntityInformation(nameSpace);
            nameSpace = nameSpace.Substring(0, nameSpace.LastIndexOf("."));
            PropertyInfo[] propertyInfos = _manageClass.GetPropertiesFromClass(nameSpace, entity);
            IList<EntityProperty> entityProperties = new List<EntityProperty>();
            if (entityInformation != null)
            {
                entityProperties = GetPropertyFromEntityInformation(entityInformation.Id);
            }

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (!IsPropertyExist(propertyInfo.Name, entityProperties))
                {
                    EntityProperty entityProperty = new EntityProperty
                    {
                        Label = propertyInfo.Name,
                        PropertyName = propertyInfo.Name,
                        EntityInformation = entityInformation
                    };
                    SaveEntityProperty(entityProperty);
                }
            }
        }
        private static bool IsPropertyExist(string property, IList<EntityProperty> entityProperties)
        {
            return entityProperties.Any(entityProperty => property == entityProperty.PropertyName);
        }
    }
}
